d
d
which(d == 1)
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
for(e in 1:length(epsilon)) {
v <- 0
for(i in 1:nrow(data)) {
tmp <- t(matrix(ncol=nrow(data)-1, rep(data[,i], nrow(data))))
d <- pdist(data[-i,], tmp)@dist
d[which(d <= e)] <- 1
d[which(d > e)] <- 0
v <- v + rowsum(x,1)
}
ret[e] <- 2*v/(n*(n-1))
}
return(ret)
}
derivate <- function(x, y) {
}
X <- generateData(1000)
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
for(e in 1:length(epsilon)) {
v <- 0
for(i in 1:nrow(data)) {
tmp <- t(matrix(ncol=nrow(data)-1, rep(data[i,], nrow(data))))
d <- pdist(data[-i,], tmp)@dist
d[which(d <= e)] <- 1
d[which(d > e)] <- 0
v <- v + rowsum(x,1)
}
ret[e] <- 2*v/(n*(n-1))
}
return(ret)
}
derivate <- function(x, y) {
}
X <- generateData(10)
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
for(e in 1:length(epsilon)) {
v <- 0
for(i in 1:nrow(data)) {
tmp <- t(matrix(ncol=nrow(data)-1, rep(data[i,], nrow(data))))
d <- pdist(data[-i,], tmp)@dist
d[which(d <= e)] <- 1
d[which(d > e)] <- 0
v <- v + rowsum(d,1)
}
ret[e] <- 2*v/(n*(n-1))
}
return(ret)
}
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
for(e in 1:length(epsilon)) {
v <- 0
for(i in 1:nrow(data)) {
tmp <- t(matrix(ncol=nrow(data)-1, rep(data[i,], nrow(data))))
d <- pdist(data[-i,], tmp)@dist
d[which(d <= e)] <- 1
d[which(d > e)] <- 0
v <- v + rowSums(d,1)
}
ret[e] <- 2*v/(n*(n-1))
}
return(ret)
}
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
for(e in 1:length(epsilon)) {
v <- 0
for(i in 1:nrow(data)) {
tmp <- t(matrix(ncol=nrow(data)-1, rep(data[i,], nrow(data))))
d <- pdist(data[-i,], tmp)@dist
d[which(d <= e)] <- 1
d[which(d > e)] <- 0
v <- v + rowSums(d)
}
ret[e] <- 2*v/(n*(n-1))
}
return(ret)
}
derivate <- function(x, y) {
}
X <- generateData(10)
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
tp <- t(matrix(ncol=nrow(X)-1, rep(X[i,], nrow(X))))
tp <- t(matrix(ncol=nrow(X)-1, rep(X[1,], nrow(X))))
View(tp)
tp <- t(matrix(ncol=nrow(X)-1, nrow=10, rep(X[1,], nrow(X))))
tp <- t(matrix(ncol=nrow(X)-1, nrow=10, rep(X[1,], nrow(X)-1)))
View(tp)
pdist(X[-1], tp)
pdist(X[-1,], tp)
tp <- t(matrix(ncol=nrow(X), nrow=10, rep(X[1,], nrow(X))))
pdist(X, tp)
as.matrix(pdist(X, tp))
View(tp)
View(X)
require(pdist)
# these sensors where selected randomly
sensors <- matrix(ncol = 3, data =
c(0.026, 0.236, -0.653, 0.310, 0.507, -0.270, -0.466,  -0.140, 0.353, -0.473,
0.241, 0.193, 0.969, 0.094, 0.756, -0.978, -0.574, -0.502, -0.281, 0.993,
0.026, -0.913, -0.700, 0.876, 0.216, -0.739, 0.556, -0.155, 0.431, 0.411))
# draw random points on the 3d unit cube
points <- matrix(ncol = 3, data = runif(3*n, -1, 1))
# We describe each point as the distance to sensors : intrinsic dimension = 3
# while extrinsic dimension = 10
distance <- apply(points, 1, function(x) {
apply(sensors, 1, function(y) {
return(f_dist(x,y))
})
})
return(t(distance))
}
res100   <- generateData(100)
res1000  <- generateData(1000)
## 1. 3-sensor data set ####
## Artificial data as from P. Desmartines, PhD Tesis 1994
f_dist <- function(x1, x2) {
return(sqrt(sum((x1 - x2) ^ 2)))
}
generateData <- function(n) {
require(pdist)
# these sensors where selected randomly
sensors <- matrix(ncol = 3, data =
c(0.026, 0.236, -0.653, 0.310, 0.507, -0.270, -0.466,  -0.140, 0.353, -0.473,
0.241, 0.193, 0.969, 0.094, 0.756, -0.978, -0.574, -0.502, -0.281, 0.993,
0.026, -0.913, -0.700, 0.876, 0.216, -0.739, 0.556, -0.155, 0.431, 0.411))
# draw random points on the 3d unit cube
points <- matrix(ncol = 3, data = runif(3*n, -1, 1))
# We describe each point as the distance to sensors : intrinsic dimension = 3
# while extrinsic dimension = 10
distance <- apply(points, 1, function(x) {
apply(sensors, 1, function(y) {
return(f_dist(x,y))
})
})
return(t(distance))
}
res100   <- generateData(100)
res1000  <- generateData(1000)
res10000 <- generateData(10000)
## 2. PCA estimator ####
res.pca100 <- prcomp(res100, scale = TRUE)
res.pca1000 <- prcomp(res1000, scale = TRUE)
res.pca10000 <- prcomp(res10000, scale = TRUE)
plot(res.pca100$sdev, col = 1)
points(res.pca1000$sdev, col = 34)
points(res.pca10000$sdev, col = 50)
dist(X)
X <- generateData(10)
dist(X)
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
for(e in 1:length(epsilon)) {
v <- 0
d <- as.matrix(dist(data))
d[which(d > e)] <- 0
d[which(d <= e)] <- 1
ret[e] <- 2*rowSums(d)/(n*(n-1))
}
return(ret)
}
derivate <- function(x, y) {
}
X <- generateData(10)
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
n <- nrow(data)
for(e in 1:length(epsilon)) {
v <- 0
d <- as.matrix(dist(data))
d[which(d > e)] <- 0
d[which(d <= e)] <- 1
ret[e] <- 2*rowSums(d)/(n*(n-1))
}
return(ret)
}
derivate <- function(x, y) {
}
X <- generateData(10)
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
warnings()
xdim
Xdim
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
n <- nrow(data)
for(e in 1:length(epsilon)) {
d <- as.matrix(dist(data))
d[which(d > e)] <- 0
d[which(d <= e)] <- 1
v <- apply(d, function(x) {
return(colSums(x))
})
ret[e] <- 2*rowSums(d)/(n*(n-1))
}
return(ret)
}
derivate <- function(x, y) {
}
X <- generateData(10)
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
n <- nrow(data)
for(e in 1:length(epsilon)) {
d <- as.matrix(dist(data))
d[which(d > e)] <- 0
d[which(d <= e)] <- 1
v <- apply(d, 1, function(x) {
return(colSums(x))
})
ret[e] <- 2*rowSums(d)/(n*(n-1))
}
return(ret)
}
derivate <- function(x, y) {
}
X <- generateData(10)
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
debug(corrDim)
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
View(d)
View(d)
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
n <- nrow(data)
for(e in 1:length(epsilon)) {
d <- as.matrix(dist(data))
d[which(d > e)] <- 0
d[which(d <= e)] <- 1
v <- 0
for(j in 1:nrow(d)) {
for(i in 1:(j-1)) {
v <- v + d[j,i]
}
}
ret[e] <- 2*v/(n*(n-1))
}
return(ret)
}
derivate <- function(x, y) {
}
X <- generateData(10)
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
debug(corrDim)
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
n <- nrow(data)
for(e in 1:length(epsilon)) {
d <- as.matrix(dist(data))
d[which(d <= e)] <- 1
d[which(d > e)] <- 0
v <- 0
for(j in 1:nrow(d)) {
for(i in 1:(j-1)) {
v <- v + d[j,i]
}
}
ret[e] <- 2*v/(n*(n-1))
}
return(ret)
}
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
n <- nrow(data)
for(e in 1:length(epsilon)) {
d <- as.matrix(dist(data))
d[which(d <= e)] <- 1
d[which(d > e)] <- 0
v <- 0
for(j in 1:nrow(d)) {
for(i in 1:(j-1)) {
v <- v + d[j,i]
}
}
print(2*v/(n*(n-1)))
ret[e] <- 2*v/(n*(n-1))
}
return(ret)
}
(X, epsilon = 10^seq(-4, 1, length.out = 100))
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
print(2*v)
## 3. Correlation Dimension Estimator ####
corrDim <- function(data, epsilon = 10^seq(-2, 1, length.out = 100)){
ret <- 1:length(epsilon)
n <- nrow(data)
for(e in 1:length(epsilon)) {
d <- as.matrix(dist(data))
d[which(d <= e)] <- 1
d[which(d > e)] <- 0
v <- 0
for(j in 1:nrow(d)) {
for(i in 1:(j-1)) {
v <- v + d[j,i]
}
}
print(2*v)
ret[e] <- 2*v/(n*(n-1))
}
return(ret)
}
Xdim <- corrDim(X, epsilon = 10^seq(-4, 1, length.out = 100))
library(tm)
library(lda)
library(topicmodels)
# Load text
raw_text <- readLines("Frank Herbert - Dune.txt", n=100)
corpus <- Corpus(VectorSource(raw_text))
# Preprocessing
pcorpus <- tm_map(corpus, content_transformer(tolower))
pcorpus <- tm_map(pcorpus, removePunctuation)
pcorpus <- tm_map(pcorpus, removeWords, stopwords(kind = "en"))
dtm <- DocumentTermMatrix(pcorpus)
dtm <- dtm[,which(table(dtm$j) >= 5)]
tdm <- TermDocumentMatrix(pcorpus)
tdm <- tdm[which(table(tdm$j) >= 5),]
# LDA
ap_lda <- LDA(tdm, k = 10, control = list(seed = 1234))
inspect(ap_lda)
install.packages("R")
install.packages("spacyr")
source("preprocess.R")
source("topics.R")
source("named.R")
library(tm)
library(lda)
library(topicmodels)
library(spacyr)
source("preprocess.R")
source("topics.R")
source("named.R")
# Load text
raw_text <- readLines("Frank Herbert - Dune.txt", n=100)
corpus <- Corpus(VectorSource(raw_text))
corpus <- preprocess(corpus)
dtm <- DocumentTermMatrix(pcorpus)
dtm <- dtm[,which(table(dtm$j) >= 5)]
tdm <- TermDocumentMatrix(pcorpus)
tdm <- tdm[which(table(tdm$j) >= 5),]
entities <- get_named_entity(corpus)
print(entities)
library(tm)
library(lda)
library(topicmodels)
library(spacyr)
source("preprocess.R")
source("topics.R")
source("named.R")
# Load text
raw_text <- readLines("Frank Herbert - Dune.txt", n=100)
corpus <- Corpus(VectorSource(raw_text))
corpus <- preprocess(corpus)
dtm <- DocumentTermMatrix(pcorpus)
dtm <- dtm[,which(table(dtm$j) >= 5)]
tdm <- TermDocumentMatrix(pcorpus)
tdm <- tdm[which(table(tdm$j) >= 5),]
entities <- get_named_entity(corpus)
print(entities)
library(tm)
library(lda)
library(topicmodels)
library(spacyr)
source("preprocess.R")
source("topics.R")
source("named.R")
# Load text
raw_text <- readLines("Frank Herbert - Dune.txt", n=100)
corpus <- Corpus(VectorSource(raw_text))
corpus <- preprocess(corpus)
dtm <- DocumentTermMatrix(pcorpus)
dtm <- dtm[,which(table(dtm$j) >= 5)]
tdm <- TermDocumentMatrix(pcorpus)
tdm <- tdm[which(table(tdm$j) >= 5),]
entities <- get_named_entity(corpus)
print(entities)
library(tm)
library(lda)
library(topicmodels)
library(spacyr)
source("preprocess.R")
source("topics.R")
source("named.R")
# Load text
raw_text <- readLines("Frank Herbert - Dune.txt", n=100)
corpus <- Corpus(VectorSource(raw_text))
pcorpus <- preprocess(corpus)
dtm <- DocumentTermMatrix(pcorpus)
dtm <- dtm[,which(table(dtm$j) >= 5)]
tdm <- TermDocumentMatrix(pcorpus)
tdm <- tdm[which(table(tdm$j) >= 5),]
entities <- get_named_entity(corpus)
print(entities)
spacy_install()
spacy_initialize()
spacy_install()
library(spacyr)
spacy_install()
library(topicmodels)
install.packages("topicmodels")
install.packages("topicmodels")
entities <- get_named_entity(corpus)
library(spacyr)
entities <- get_named_entity(corpus)
library(spacyr)
spacy_install()
spacy_install()
spacy_initialize()
spacy_initialize()
library(tm)
library(lda)
library(topicmodels)
library(spacyr)
source("preprocess.R")
source("topics.R")
source("named.R")
# Load text
raw_text <- readLines("Frank Herbert - Dune.txt", n=100)
corpus <- Corpus(VectorSource(raw_text))
pcorpus <- preprocess(corpus)
dtm <- DocumentTermMatrix(pcorpus)
dtm <- dtm[,which(table(dtm$j) >= 5)]
tdm <- TermDocumentMatrix(pcorpus)
tdm <- tdm[which(table(tdm$j) >= 5),]
entities <- get_named_entity(corpus)
print(entities)
library(tm)
library(lda)
library(topicmodels)
library(spacyr)
source("preprocess.R")
source("topics.R")
source("named.R")
# Load text
raw_text <- readLines("Frank Herbert - Dune.txt", n=100)
corpus <- Corpus(VectorSource(raw_text))
pcorpus <- preprocess(corpus)
dtm <- DocumentTermMatrix(pcorpus)
dtm <- dtm[,which(table(dtm$j) >= 5)]
tdm <- TermDocumentMatrix(pcorpus)
tdm <- tdm[which(table(tdm$j) >= 5),]
entities <- get_named_entity(corpus)
print(entities)
entities <- get_named_entity(pcorpus)
source("named.R")
entities <- get_named_entity(pcorpus)
library(spacyr)
entities <- get_named_entity(pcorpus)
source("named.R")
entities <- get_named_entity(pcorpus)
install.packages("quanteda")
source("named.R")
entities <- get_named_entity(pcorpus)
library(tm)
library(lda)
library(topicmodels)
library(spacyr)
source("preprocess.R")
source("topics.R")
source("named.R")
# Load text
raw_text <- readLines("Frank Herbert - Dune.txt", n=100)
corpus <- Corpus(VectorSource(raw_text))
pcorpus <- preprocess(corpus)
dtm <- DocumentTermMatrix(pcorpus)
dtm <- dtm[,which(table(dtm$j) >= 5)]
tdm <- TermDocumentMatrix(pcorpus)
tdm <- tdm[which(table(tdm$j) >= 5),]
entities <- get_named_entity(pcorpus)
print(entities)
library(tm)
library(lda)
library(topicmodels)
library(spacyr)
source("preprocess.R")
source("topics.R")
source("named.R")
# Load text
raw_text <- readLines("Frank Herbert - Dune.txt", n=100)
corpus <- Corpus(VectorSource(raw_text))
pcorpus <- preprocess(corpus)
dtm <- DocumentTermMatrix(pcorpus)
dtm <- dtm[,which(table(dtm$j) >= 5)]
tdm <- TermDocumentMatrix(pcorpus)
tdm <- tdm[which(table(tdm$j) >= 5),]
entities <- get_named_entity(pcorpus)
print(entities)
